{
  "name": "Graphe-et-ontologies",
  "tagline": "On désire créer une application en Java pour la navigation dans un document électronique à l'aide d'un graphe d'ontologie afin d’en faciliter l’étude.",
  "body": "# Graphe Et Ontologies\r\n\r\n[![Build Status](https://travis-ci.org/jfourmond/Graphe-Et-Ontologies.svg?branch=master)](https://travis-ci.org/jfourmond/Graphe-Et-Ontologies)\r\n\r\nTravaux Encadrés de Recherche sous la supervision de :\r\n* Dr. RICHER Jean-Michel\r\n* Dr. AÏT EL MEKKI Touria\r\n\r\nPar :\r\n* [FOURMOND Jérôme](https://github.com/jfourmond)\r\n\r\nEn développement sous la version :\r\n- *1.8.0_77* de **Java**\r\n\r\n---\r\n\r\n## I. L'objectif\r\n\r\nOn désire créer une application en Java pour la navigation dans un document électronique à l'aide d'un graphe d'ontologie afin d’en faciliter l’étude.\r\n[Plus de spécification](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/B-ontologie.pdf)\r\n\r\n---\r\n\r\n## II. Etapes & Avancement\r\n\r\n### 1. Première étape\r\n\r\n- [x] [Diagramme de classe](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/class_diagram)\r\n- [x] Framework pour la gestion de graphe\t\t:package: \r\n- [x] Visualisation\r\n\r\nLe développement de cette partie se retrouve dans le commit [suivant](https://github.com/jfourmond/Graphe-Et-Ontologies/commit/9fc66969087589aeebd0c4a2a8ac063c2ddcccdc). Certaines parties ne convenant pas aux besoins nécessaires, le code a été réorganisé et reproduit. L'interface **SWING** a été retirée pour se concentrer essentiellement sur **JavaFX**.\r\n\r\n### 2. Seconde étape\r\n\r\n- [x] Lecture d'Ontologies\t\t:deciduous_tree:\r\n- [x] Visualisation d'Ontologies\r\n\r\n### 3. Troisième étape\r\n\r\n- [x] Sauvegarde d'Ontologies\r\n- [x] Chargement d'Ontologies\r\n- [x] Interaction avec l'Ontologie\r\n\r\n### 4. Quatrième étape\r\n\r\n- [ ] Manuel d'utilisation\r\n- [ ] Rapport\r\n- [ ] Soutenance\r\n\r\n---\r\n\r\n## III. Compilation & Exécution\r\n\r\n### 1. Compilation\r\n\r\n\tant build\r\n\t\r\n### 2. Exécution\r\n\r\nL'exécution s'effectue ainsi, en ligne de commande :\r\n\r\n\tant run\r\n\r\n### 3. Javadoc\r\n\r\nLa génération de la javadoc est disponible en exécutant la cible :\r\n\r\n\tant javadoc\r\n\r\n### 4. Java Archive\r\n\r\nLa génération d'une archive jar exécutable en exécutant la cible :\r\n\r\n\tant jar\r\n\r\n---\r\n\r\n## IV. Le Frawework pour la gestion de graphe\r\n\r\nL'utilisation du [framework](https://github.com/jfourmond/Graphe-Et-Ontologies/tree/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework) s'effectue aisément. Il est composé de 9 classes, dont 3 pour les exceptions. La plupart sont dépendantes entre elles, mais certaines peuvent s'utiliser en solitaire.\r\nUn graphe doit pouvoir être crée en lisant un fichier xml avec une dtd reprenant une définition valide pour le programme. Des chaînes de caractère (**String**) sont donc principalement utilisées.\r\n\r\n### 1. Pair<Type 1, Type 2>\r\n\r\n[Pair](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Pair.java) est une classe générique. Elle permet de manipuler des paires d'*Object*.\r\nPar exemple :\r\n\r\n\tPair<String, Integer> p1 = new Pair<>();\t\t\t\t\t// Création d'une paire\r\n\tp1.setFirst(\"Population\");\t\t\t\t\t\t\t\t// Edition du premier membre\r\n\tp1.setSecond(7348);\t\t\t\t\t\t\t\t\t\t// Edition du second membre\r\n\tPair<Integer, String> p2 = new Pair<>(1, \"Numéro 1\");\t// Création d'une paire, initialisée\r\n\r\n### 2. Sommet - *Vertex*\r\n\r\n[Vertex](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Vertex.java) est une classe représentant un sommet.\r\nElle comporte deux attributs :\r\n- Un *ID* : sous la forme d'un **String**\r\n- Une **Map<String, String>** associant attributs et valeurs\r\nEt différentes méthodes pour sa manipulation, ainsi qu'une classe pour la gestion des **Exceptions**.\r\nCette classe sera utilisée dans la modélisation du graphe.\r\nPar exemple :\r\n\r\n\tVertex sommet = new Vertex(\"1\");\t// Création d'un sommet avec l'ID \"1\"\r\n\tsommet.add(\"Nom\");\t\t\t\t\t// Création d'un attribut \"Nom\"\r\n\tsommet.set(\"Nom\", \"Jerome\");\t\t\t// Edition de la valeur de l'attribut \"Nom\"\r\n\tString nom = sommet.get(\"Nom\");\t\t// Récupération de la valeur de l'attribut \"Nom\"\r\n\r\n### 3. Relation - *Relation*\r\n\r\nLa modélisation d'un graphe utilisée ici peut posséder plusieurs relations (*types d'arcs*). La classe [Relation](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Relation.java) est une classe représentant une *Relation* et les différents arcs en découlant. Elle est composée de deux attributs :\r\n- Un *nom* : sous la forme d'un **String**, fonctionne comme un identifiant\r\n- Une Liste de [Pair](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Pair.java)<Vertex, Vertex> représentant les arcs entre les différents sommets\r\nBien entendu, la classe contient également différentes méthodes pour la manipulation de ses instances, ainsi qu'une classe pour la gestion des **Exceptions**.\r\nCette classe sera utilisée dans la modélisation du graphe.\r\nPar exemple :\r\n\r\n\tVertex v1 = new Vertex(\"1\");\r\n\tVertex v2 = new Vertex(\"2\");\r\n\tRelation relation = new Relation(\"est voisin de\");\t\t// Création d'une relation\r\n\tPair<Vertex, Vertex> pair = new Pair<>(v1, v2);\r\n\trelation.add(pair);\t\t\t\t\t\t\t\t\t\t// Ajout de la paire à la relation\r\n\r\n### 4. Graphe - *Tree*\r\n\r\n[Tree](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Tree.java) représente un graphe. Il est composé de deux attributs *principaux* :\r\n- Une liste de [Vertex](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Vertex.java), dont l'identifiant de chacun doit être unique\r\n- Une liste de [Relation](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Relation.java), dont le nom de chacune doit être unique\r\nIl peut être construit dynamiquement.\r\nLa classe possède également ses propres **Exceptions**.\r\n\r\nL'ajout d'un sommet dans le graphe s'effectue grâce à différentes méthodes : \r\n\t\r\n\tTree tree = new Tree();\t\t\t\t// Création de l'arbre\r\n\ttree.createVertex(\"1\");\t\t\t\t// Création d'un sommet portant l'identifant \"1\" dans l'arbre\r\n\tVertex vertex = new Vertex(\"2\");\r\n\ttree.createVertex(vertex);\t\t\t// Ajout d'un sommet dans l'arbre\r\n\r\nL'ajout d'un arc dans le graphe s'effectue après différentes étapes, il faut créer la relation, puis y ajouter les paires.\r\n\r\n\ttree.createRelation(\"est voisin de\");\t\t\t\t\t// Création d'une relation dans l'arbre\r\n\ttree.addPair(\"est voisin de\", \"1\", \"2\");\t\t\t\t// Ajout d'une paire dans la relation \"est voisin de\", entre le sommet portant l'identifiant \"1\" et le sommet portant l'identifiant \"2\"\r\n\t\r\n\tRelation relation = new Relation(\"est parent de\");\r\n\tVertex p1 = new Vertex(\"3\");\r\n\tVertex p2 = new Vertex(\"4\");\r\n\tPair<Vertex, Vertex> pair = new Pair<>(p1, p2);\r\n\trelation.add(pair);\r\n\ttree.createRelation(relation);\t\t\t\t\t\t\t// Création d'une relation dans l'arbre\r\n\r\n### 5. Chargement de l'arbre - *TreeLoader*\r\n\r\n[TreeLoader](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/TreeLoader.java) est une classe permettant de gérer le chargement d'un fichier XML.\r\n\r\n\tTreeLoader loader = new TreeLoader(tree, F);\r\n\tnew Thread(loader).start();\r\n\r\n### 6. Sauvegarde de l'arbre - *TreeSaver*\r\n\r\n[TreeSaver](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/TreeSaver.java) est une classe permettant de gérer la sauvegarde d'un arbre dans un fichier XML.\r\n\r\n\tTreeSaver saver = new TreeSaver(tree);\r\n\tnew Thread(saver).start();\r\n\r\n### 7. Positionnement - *Placement*\r\n\r\n[Placement](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Placement.java) est une classe reprenant le concept de la classe Random de Java. A chaque appel de sa méthode next(), l'instance de la classe retourne le Point suivant contenu dans un tableau. Lorsque ce dernier est vide, un appel à next() générera aléatoirement un Point.\r\n**Placement** contient, pour le moment, 24 Point *statiques*.\r\nPar exemple :\r\n\r\n\tPlacement p = new Placement();\r\n\tPoint point = p.next();\r\n\r\n### 8. Couleur - *ColorDistribution*\r\n\r\n[ColorDistribution](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/ColorDistribution.java) est une classe reprenant le concept de la classe Random de Java. A chaque appel de sa méthode next(), l'instance de la classe retourne la Color suivante contenue dans un tableau. Lorsque ce dernier est vide, un appel à next() générera aléatoirement une Color.\r\n**ColorDistribution** contient, pour le moment, 9 Color *statiques*.\r\nPar exemple :\r\n\r\n\tColorDistribution cd = new ColorDistribution();\r\n\tColor color = cd.next();\r\n\t\r\n**N.B** : Color, ici, fait partie des packages de **JavaFX** (*javafx.scene.paint*)\r\n\r\n---\r\n\r\n## V. L'Affichage\r\n\r\nL'affichage d'un arbre s'effectue sous JavaFX.\r\n\r\n### 1. Sommet - *VertexView*\r\n\r\nUn sommet est représenté par un **Group**. Ce dernier contient et dessine un cercle et deux labels : le premier pour l'idenfiant, le second pour le nom. Les deux coexistent, mais seul un des deux n'est affiché à l'écran.\r\n\r\n#### b. Arc - *EdgeView*\r\n\r\nUn arc est représenté par un **Group**. Ce dernier contient et dessine une ligne entre deux **VertexView** et un label, contenant le libellé de la relation dessinée.\r\n\r\n#### c. Graphe - *TreeView*\r\n\r\nL'arbre contient l'ensemble des **Group** (**VertexView** & **EdgeView**) et est lui-même un **Group**. En fonction de la variable de type **Tree** passée en paramètre, il construit ses sommets et ses arcs et leur accorde différents *listeners*.\r\n\r\n#### d. Application - *Launcher*\r\n\r\nCette classe permet d'ouvrir l'application.\r\n\r\n--- \r\n\r\n## VI. Les Ontologies, en XML\r\n\r\n### 1. La DTD (*Document Type Definition*) et le XSD (*XML Schema*)\r\n\r\nLe fichier XML utilisé dans la construction d'un arbre d'ontologie doit respecter une DTD précise, plus précisément le fichier [suivant](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/lib/definition.dtd), ou le [XSD](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/lib/schema.xsd), généré sur la base de la DTD précédente.\r\nPar exemple :\r\n\t[Villes.xml](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Ontologies/Villes.xml)\r\n\t\r\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<IndexSource>\r\n\t\t<ENTREE id=\"1\" nom=\"Pays-De-La-Loire\">\r\n\t\t\t<RELATION nom=\"appartient à la région\" />\r\n\t\t\t<RELATION nom=\"appartient au département du\" />\r\n\t\t\t<RELATION nom=\"a proximite de\" />\r\n\t\t</ENTREE>\r\n\t\t<ENTREE id=\"2\" nom=\"Maine-Et-Loire\">\r\n\t\t\t<RELATION nom=\"appartient à la région\">\r\n\t\t\t<LIEN>1</LIEN>\r\n\t\t\t</RELATION>\r\n\t\t\t<RELATION nom=\"appartient au département du\" />\r\n\t\t\t<RELATION nom=\"a proximite de\" />\r\n\t\t</ENTREE>\r\n\t\t<ENTREE id=\"3\" nom=\"Loire-Atlantique\">\r\n\t\t\t<RELATION nom=\"appartient à la région\">\r\n\t\t\t<LIEN>1</LIEN>\r\n\t\t\t</RELATION>\r\n\t\t\t<RELATION nom=\"appartient au département du\" />\r\n\t\t\t<RELATION nom=\"a proximite de\" />\r\n\t\t\t</ENTREE>\r\n\t</IndexSource>\r\n\r\n### 2. Le Chargement\r\n\r\nLors du chargement du fichier, le programme vérifie s'il est valide sur le schéma de l'application. Puis crée un [Tree](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Tree.java) manipulable par la suite.\r\n\r\n### 3. L'Ecriture\r\n\r\nL'écriture du fichier s'effectue grâce à la libraire JDOM. Dans le fichier spécifié par l'attribut *file* de l'instance de [Tree](https://github.com/jfourmond/Graphe-Et-Ontologies/blob/master/Graphe-Et-Ontologies/src/fr/fourmond/jerome/framework/Tree.java).\r\nUn fichier temporaire XML est également enregistré pour conserver les positions des sommets lors de l'enregistrement, ainsi que les couleurs des relations.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}